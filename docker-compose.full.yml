version: '3.8'

services:
  # TimescaleDB for time-series data storage
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: pm-timescaledb
    environment:
      POSTGRES_DB: predictive_maintenance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - timeseries_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MQTT Broker for IoT sensor data
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: pm-mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: pm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pm-api
    command: uvicorn src.api.app:app --host 0.0.0.0 --port 8000 --workers 4
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@timescaledb:5432/predictive_maintenance
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      timescaledb:
        condition: service_healthy
      mosquitto:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pm-dashboard
    command: python main.py --mode monitor --port 8050
    ports:
      - "8050:8050"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@timescaledb:5432/predictive_maintenance
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - timescaledb
      - api
    restart: unless-stopped

  # MQTT Streaming Processor
  mqtt-processor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pm-mqtt-processor
    command: python src/streaming/mqtt_broker.py --host mosquitto --port 1883
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@timescaledb:5432/predictive_maintenance
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - timescaledb
      - mosquitto
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: pm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

  # MLflow for experiment tracking
  mlflow:
    image: python:3.10-slim
    container_name: pm-mlflow
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server
               --backend-store-uri postgresql://postgres:postgres@timescaledb:5432/mlflow
               --default-artifact-root /mlflow/artifacts
               --host 0.0.0.0
               --port 5000"
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://postgres:postgres@timescaledb:5432/mlflow
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      - timescaledb
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - dashboard
      - grafana
    restart: unless-stopped

volumes:
  timeseries_data:
  mosquitto_data:
  mosquitto_logs:
  redis_data:
  prometheus_data:
  grafana_data:
  mlflow_data:

networks:
  default:
    name: predictive-maintenance-network
